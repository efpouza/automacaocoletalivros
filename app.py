import streamlit as st
import pandas as pd
import time
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager

# ...

options = Options()
options.add_argument('--headless')
options.add_argument('--disable-gpu')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')  # Ajuda em ambientes com pouca mem√≥ria

# Corrigir o driver com webdriver-manager
service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service, options=options)


def raspar_livros(progress_bar, status_text, porcentagem_texto):
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    options.add_argument('--no-sandbox')
    service = Service()
    driver = webdriver.Chrome(service=service, options=options)

    driver.get('https://books.toscrape.com/')
    books = []
    current_page = 1

    while True:
        book_elements = driver.find_elements(By.CSS_SELECTOR, 'article.product_pod')

        for book in book_elements:
            title = book.find_element(By.TAG_NAME, 'h3').find_element(By.TAG_NAME, 'a').get_attribute('title')
            price = book.find_element(By.CLASS_NAME, 'price_color').text
            availability = book.find_element(By.CLASS_NAME, 'availability').text.strip()
            rating = book.find_element(By.CLASS_NAME, 'star-rating').get_attribute('class').split()[-1]

            books.append([title, price, availability, rating])

        progresso = min((current_page / 50), 1.0)
        progresso_percentual = int(progresso * 100)
        progress_bar.progress(progresso)
        status_text.markdown(f"<div style='text-align: center;'>üìñ Coletando p√°gina {current_page}...</div>", unsafe_allow_html=True)
        porcentagem_texto.markdown(f"<div style='text-align: center;'>Progresso: <strong>{progresso_percentual}%</strong></div>", unsafe_allow_html=True)

        try:
            next_button = driver.find_element(By.CSS_SELECTOR, 'li.next > a')
            next_page_url = next_button.get_attribute('href')
            driver.get(next_page_url)
            current_page += 1
            time.sleep(0.3)
        except NoSuchElementException:
            break

    driver.quit()
    df = pd.DataFrame(books, columns=["T√≠tulo", "Pre√ßo", "Disponibilidade", "Avalia√ß√£o"])
    df.to_csv("livros.csv", index=False, encoding="utf-8")
    return df

# --- Interface Streamlit ---
st.set_page_config(page_title="üìö Raspador de Livros", layout="wide")

# T√≠tulo centralizado
st.markdown("<h1 style='text-align: center;'>üìö Coleta Livros - Loja Virtual</h1>", unsafe_allow_html=True)
st.markdown("---")

# √Årea fixa para barra de progresso e status
status_text = st.empty()
progress_bar = st.progress(0)
porcentagem_texto = st.empty()

# Exibir mensagem inicial
status_text.markdown("<div style='text-align: center;'>‚è≥ Aguardando a√ß√£o do usu√°rio...</div>", unsafe_allow_html=True)
porcentagem_texto.markdown("<div style='text-align: center;'>Progresso: <strong>0%</strong></div>", unsafe_allow_html=True)

# Espa√ßo antes dos bot√µes
st.markdown("###")

# Layout dos bot√µes
col1, col2 = st.columns([1, 1])

with col1:
    iniciar = st.button("üîç Iniciar Coleta", use_container_width=True)

with col2:
    limpar = st.button("üßπ Limpar", use_container_width=True)

st.markdown("---")

# Processamento
if iniciar:
    with st.spinner("Coletando dados..."):
        df_resultado = raspar_livros(progress_bar, status_text, porcentagem_texto)
        status_text.markdown(f"<div style='text-align: center;'>‚úÖ Coleta finalizada com {len(df_resultado)} livros.</div>", unsafe_allow_html=True)
        porcentagem_texto.markdown("<div style='text-align: center;'>Progresso: <strong>100%</strong></div>", unsafe_allow_html=True)
        progress_bar.progress(1.0)
        st.dataframe(df_resultado, use_container_width=True)
        st.download_button("‚¨áÔ∏è Baixar CSV", df_resultado.to_csv(index=False), file_name="livros.csv", mime="text/csv")

# Limpeza (reinicializa o app)
if limpar:
    st.rerun()
